/* Copyright (C) 2017 Koen de Boer

   This file is part of the powerresiduesymbolcalculator. the powerresiduecalculator
   is free software: you can redistribute it and/or modify it under the terms of the 
   GNU Lesser General Public License as published by the Free Software Foundation,
   either version 2.1 of the License, or (at your option) any later version.

   The powerresiduesymbolcalculator is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
   FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with powerresiduesymbolcalculator. If not, see <http://www.gnu.org/licenses/>. */


getRandomElement := function(L,bound : lowerbound := 1)
	m := Degree(L);
	List := [ Random(lowerbound,bound) : i in [1..m]];
	return L!(Integers(L)!List);

end function;

getTwoCoPrimeElements := function(R,m,size)
    // Computes two coprime elements alpha and beta, which
    // are both coprime to m. This is a valid input to the
    // power residue symbol.

	alpha := getRandomElement(R,10^size : lowerbound := 10^(size-1));
	beta := getRandomElement(R,10^size : lowerbound := 10^(size-1));
	Qbeta := quo<R|ideal<R|beta>>;

	while ( not IsInvertible(Qbeta!alpha) or (GCD(Norm(beta),m) ne 1)) do
			alpha := getRandomElement(R,10^size : lowerbound := 10^(size-1));
			beta := getRandomElement(R,10^size : lowerbound := 10^(size-1));
			Qbeta := quo<R|ideal<R|beta>>;
	end while;
		

	return alpha,beta;

end function;
